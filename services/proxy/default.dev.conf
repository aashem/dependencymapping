
upstream api {
    server api:3000;
}

upstream app {
    server app:3000;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name localhost;

    # serve certbot challenge

    location /.well-known {
        allow all;
        root /data/certbot/; # this needs to be mounted
    }

    location / {
        return 302 https://$server_name:8443$request_uri;
    }
}

server {

    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name localhost;

    include snippets/ssl-devconfig.conf;
    include snippets/ssl-params.conf;

    # docker compose should
    # mount the ./build built
    # by webapp to this root
    root /www/webapp/;

    # Basic auth handled downstream

    location = /api {

        #auth_basic "Dependency Mapper";
        #auth_basic_user_file /etc/nginx/auth.d/auth.pwd;
        return 302 /api/;
    }

    location /api/ {

        #auth_basic "Dependency Mapper";
        #auth_basic_user_file /etc/nginx/auth.d/auth.pwd;

        proxy_pass          http://api/;
        proxy_redirect      off;
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host $server_name;
    }

    location / {
        #auth_basic "Dependency Mapper";
        #auth_basic_user_file /etc/nginx/auth.d/auth.pwd;

	    proxy_pass          http://app/;
	    proxy_redirect      off;
	    proxy_set_header    Host $host;
	    proxy_set_header    X-Real-IP $remote_addr;
		proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header    X-Forwarded-Host $server_name;
	}
}



