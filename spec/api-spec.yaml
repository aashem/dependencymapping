openapi: 3.0.0

info:
  description: Simple Dependency Mapping API
  version: "1.0.0-oas3"
  title: Dependency Mappings API
  termsOfService: todo
  contact:
    email: vaisanen.toni@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: Asset
    description: >
      Asset resource paths.
      [source](https://github.com/tvaisanen/dependencymapping/blob/master/services/express-server/src/routers/asset.router.js)
    externalDocs:
      description: 'no external docs'
      url: ''
  - name: Connection
    description: connections
  - name: Mapping
    description: mappings
    externalDocs:
      description: todo
      url: 'http://docs.localhost/mappings'
paths:
  '/asset':
    get:
      tags:
        - Asset
      summary: Asset detail list.
      responses:
        '200':
          description: Asset list
    post:
      tags:
        - Asset
      summary: Add a new asset to the database
      operationId: addAsset
      requestBody:
        description: Asset object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
      responses:
        '201': 
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Asset'
        '405':
          description: Invalid input
        '409':
          description: Asset already exists
  '/asset/{id}':
    get:
      tags:
        - Asset
      summary: Find asset by ID
      description: Returns a single asset
      operationId: getAssetById
      parameters:
        - name: id
          in: path
          description: ID of asset to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          description: Invalid ID supplied
        '404':
          description: Asset not found
    put:
      tags:
        - Asset
      parameters: 
        - name: id
          in: path
          required: true
          schema:
            type: string
            
      summary: Update an existing asset
      operationId: updateAsset
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Asset not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        description: Asset object that needs to be updated in the database
        required: true
        
    delete:
      tags:
        - Asset
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: Asset id to delete
          required: true
          schema:
            type: string
            
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Asset not found
  '/connection':
    get:
      tags: 
        - Connection
      description: >
        Get all tags
      responses:
        '200':
          description: Get list of connections
    post:
      tags: 
        - Connection
      description: Create new connection
      responses:
        '201':
          description: Connection created successfully
        '400':
          description: Connection already exists
        '500':
          description: Internal server error
  '/connection/{id}':
    delete:
      tags:
        - Connection
      parameters:
        - name: id
          in: path
          description: ID of asset to return
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Connection
        '400':
          description: Error deleting
  '/mapping':
  
    get:
      tags:
        - Mapping
      operationId: getMappings
      responses:
        '200':
          description: Return list of mappings
          
    post:
      tags:
        - Mapping
      operationId: postMapping
      responses:
        '201':
          description: Tag created successfully
        '400':
          description: Validation exception
        '500':
          description: Internal server error
  
  '/mapping/{id}':
    get:
      tags:
        - Mapping
      parameters:
      - name: id
        in: path
        description: ID of the Mapping to return
        required: true
        schema:
          type: string
      operationId: getMapping
      responses:
        '200':
          description: Get mapping detail
    put:
      tags:
        - Mapping
      parameters:
      - name: id
        in: path
        description: ID of mapping to update
        required: true
        schema:
          type: string
      operationId: putMapping
      responses:
        '200':
          description: Updated mapping
    delete:
      tags: 
        - Mapping
      parameters:
      - name: id
        in: path
        description: ID of the mapping to delete
        required: true
        schema:
          type: string
      operationId: deleteMapping
      responses:
        '204':
          description: Delete mapping detail
          
  '/tag':
  
    get:
      tags:
        - Tag
      operationId: getTags
      responses:
        '200':
          description: Return list of tags
          
    post:
      tags:
        - Tag
      operationId: postTag
      responses:
        '201':
          description: Tag created successfully
        '400':
          description: Validation exception
        '500':
          description: Internal server error
  
  '/tag/{id}':
    get:
      tags:
        - Tag
      parameters:
      - name: id
        in: path
        description: ID of asset to return
        required: true
        schema:
          type: string
      operationId: getTag
      responses:
        '200':
          description: Get tag detail
    put:
      tags:
        - Tag
      parameters:
      - name: id
        in: path
        description: ID of asset to return
        required: true
        schema:
          type: string
      operationId: putTag
      responses:
        '200':
          description: Update tag detail
    delete:
      tags: 
        - Tag
      parameters:
      - name: id
        in: path
        description: ID of asset to return
        required: true
        schema:
          type: string
      operationId: deleteTag
      responses:
        '204':
          description: Delete tag detail
  
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://virtserver.swaggerhub.com/tvaisanen_dev/dependency-maps/1.0.0'
  - url: 'http://virtserver.swaggerhub.com/tvaisanen_dev/dependency-maps/1.0.0'
components:
  requestBodies:
    AssetArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Asset'
      description: List of asset objects
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Error:
      type: object
      properties:
        message: 
          type: string
        
    _embedded_object:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        href:
          type: string
    _links:
      type: object
      properties:
        href:
          type: string
          format: url
    Asset:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        _embedded:
          type: object
          properties:
            connected_to:
              type: array
              items:
                $ref: '#/components/schemas/_embedded_object'
            tags:
              type: array
              items:
                type: object
        _links:
          $ref: '#/components/schemas/_links'
      xml:
        name: Order
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string